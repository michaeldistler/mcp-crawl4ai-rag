services:
  # PostgreSQL database with pgvector extension for RAG functionality
  postgres:
    image: pgvector/pgvector:pg16
    container_name: crawl4ai-postgres
    environment:
      POSTGRES_DB: crawl4ai_rag
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-defaultpassword}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./crawled_pages.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d crawl4ai_rag"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crawl4ai-network

  # MCP server for web crawling and RAG
  mcp-server:
    build: .
    container_name: crawl4ai-mcp-server
    environment:
      # Transport configuration
      TRANSPORT: ${TRANSPORT:-sse}
      HOST: ${HOST:-0.0.0.0}
      PORT: ${PORT:-8051}
      
      # LLM Provider Configuration
      LLM_PROVIDER: ${LLM_PROVIDER:-ollama}
      EMBEDDING_PROVIDER: ${EMBEDDING_PROVIDER:-ollama}
      LLM_MODEL: ${LLM_MODEL:-llama3.2:latest}
      
      # OpenAI configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_EMBEDDING_MODEL: ${OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}
      
      # Anthropic configuration
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Ollama configuration
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://localhost:11434}
      OLLAMA_EMBEDDING_MODEL: ${OLLAMA_EMBEDDING_MODEL:-nomic-embed-text}
      OLLAMA_EMBEDDING_DIMENSION: ${OLLAMA_EMBEDDING_DIMENSION:-768}
      
      # Sentence Transformers configuration
      SENTENCE_TRANSFORMERS_MODEL: ${SENTENCE_TRANSFORMERS_MODEL:-all-MiniLM-L6-v2}
      
      # Legacy support
      MODEL_CHOICE: ${MODEL_CHOICE:-gpt-4o-mini}
      
      # PostgreSQL configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: crawl4ai_rag
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-defaultpassword}
      
      # RAG strategies
      USE_CONTEXTUAL_EMBEDDINGS: ${USE_CONTEXTUAL_EMBEDDINGS:-false}
      USE_HYBRID_SEARCH: ${USE_HYBRID_SEARCH:-false}
      USE_AGENTIC_RAG: ${USE_AGENTIC_RAG:-false}
      USE_RERANKING: ${USE_RERANKING:-false}
      USE_KNOWLEDGE_GRAPH: ${USE_KNOWLEDGE_GRAPH:-false}
      
      # Neo4j configuration (when USE_KNOWLEDGE_GRAPH=true)
      NEO4J_URI: ${NEO4J_URI:-bolt://neo4j:7687}
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
    ports:
      - "${PORT:-8051}:${PORT:-8051}"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_started
        required: false
    networks:
      - crawl4ai-network
    volumes:
      # Mount .env file if it exists
      - ./.env:/app/.env:ro
    restart: unless-stopped

  # Neo4j database for knowledge graph functionality (optional)
  # Only starts if USE_KNOWLEDGE_GRAPH is set to true
  neo4j:
    image: neo4j:5.15-community
    container_name: crawl4ai-neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-neo4jpassword}
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*,gds.*
    ports:
      - "7474:7474"  # Neo4j Browser
      - "7687:7687"  # Bolt protocol
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - crawl4ai-network
    profiles:
      - knowledge-graph
    restart: unless-stopped

  # Optional: pgAdmin for PostgreSQL database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: crawl4ai-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@crawl4ai.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-adminpassword}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - crawl4ai-network
    profiles:
      - admin
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local

networks:
  crawl4ai-network:
    driver: bridge
